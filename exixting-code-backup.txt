package main

import (
  "fmt"
  "os"
  "strconv"
  "time"
  "bufio"
  "math/rand"
)

type data struct {
  Id int                   `json:"id"`
  Name string              `json:"name"`
  Task string              `json:"task"`
  Date time.Time           `json:"date"`
  Completed bool           `json:"completed"`
  Createdon time.Time      `json:"createdon"`
  Completedon time.Time    `json:"completedon"`

}

var maindata []data

func LoadData(){
  _, err := os.OpenFile("db.json", os.O_APPEND|os.O_CREATE|os.O_WRONLY, 0644)
  if err != nil {
      panic(err)
  }
}

func findbyID(md []data,target int) int{
  for i,ele:= range md{
    if  ele.Id== target{
      return i
    }
  }
  return -1
}

func genId() int{
  min := 1000
  max := 9999
  return rand.Intn(max-min+1) + min
}

func printWelcome() {
  fmt.Printf("Select below options\n1) List Tasks\n2) Add Task\n3) Update Task\n4) Delete Task\n5) Exit\n")
}

func printUpdateOptions() {
  fmt.Printf("Select below options\n1) Update Name\n2) Update Task\n3) Update Status\n")
}

func Add(){
  var name string
  fmt.Println("Enter the Task Name to add")
  bf := bufio.NewReader(os.Stdin)
  name,err := bf.ReadString('\n')
  if(err != nil){
    panic(err)
  }
  var d data
  d.Id = genId()
  d.Name = name
  d.Createdon = time.Now()
  maindata = append(maindata, d)
  fmt.Println("Task added successfully")
}

func Update(){
  var Id int
  fmt.Println("Enter the Task Id to delete")
  fmt.Scanln(&Id)
  ind := findbyID(maindata,Id)
  if(ind == -1){
    fmt.Println("Task not found")
  }
  printUpdateOptions()
  var flag1 int
  var updateopt string
  for{
    fmt.Scanln(&updateopt)
    if !validateInput(updateopt,&flag1){
      break
    }
  }

  switch(flag1){
    case 1: bf := bufio.NewReader(os.Stdin)
            name,err := bf.ReadString('\n')
            if(err != nil){
              panic(err)
            }
              maindata[ind].Name = name
    case 2: bf := bufio.NewReader(os.Stdin)
            name,err := bf.ReadString('\n')
            if(err != nil){
              panic(err)
            }
              maindata[ind].Task = name
    case 3:maindata[ind].Completed = !maindata[ind].Completed
    default :fmt.Println("Invalid option")
  }

  fmt.Println("Task updated successfully")
  //update name
  //update task
  //update status
}

func Delete(){
  var Id int
  fmt.Println("Enter the Task Id to delete")
  fmt.Scanln(&Id)
  fmt.Println("Task deleted successfully")
  ind := findbyID(maindata,Id)
  if(ind == -1){
    fmt.Println("Task not found")
  }else{
    maindata = append(maindata[:ind],maindata[ind+1:]...)
  }
}

func List(){
  fmt.Println("List of Tasks")
  fmt.Println(maindata)
}

func Exit(){
  fmt.Println("Thanks for using the application, Exiting !!!")
  os.Exit(0)
}
func validateInput(inp string,flag *int) (err_found bool){
  inp_int,err := strconv.Atoi(inp)
  if(err != nil){
    err_found = true
  }
  if(inp_int<1 || inp_int >5){
    err_found = true
  }
  if(err_found){
    fmt.Println("Invalid Input",inp)
  }
  *flag = inp_int
  return
}

func main() {
  var inp string
  var flag int
  for {
    LoadData()
    printWelcome()
    for{
      fmt.Scanln(&inp)
      if !validateInput(inp,&flag){
        break
      }
    }
    switch(flag){
      case 1:List()
      case 2:Add()
      case 3:Update()
      case 4:Delete()
      case 5:Exit()
    }
  }
}
